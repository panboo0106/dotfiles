# 基础设置
line-length = 120 # 与 Black 默认值保持一致
target-version = "py39" # 根据项目支持的最低 Python 版本调整
include = ["*.py", "*.pyi", "**/pyproject.toml"]
exclude = [
  ".git",
  ".ruff_cache",
  ".venv",
  "venv",
  "__pycache__",
  "build",
  "dist",
]

[lint]
# 启用的规则
select = [
  "E",   # pycodestyle 错误
  "F",   # pyflakes
  "I",   # isort
  "N",   # pep8-naming
  "UP",  # pyupgrade
  "B",   # flake8-bugbear
  "C4",  # flake8-comprehensions
  "SIM", # flake8-simplify
  "TCH", # flake8-type-checking
  "RUF", # Ruff-specific rules
  "PT",  # flake8-pytest-style
  "PTH", # flake8-use-pathlib
  "ERA", # eradicate 删除注释掉的代码
  "PL",  # pylint
  "TRY", # tryceratops 异常处理相关
  "PIE", # flake8-pie 杂项规则
]
# 忽略的规则
ignore = [
  "E203",    # 与 Black 冲突 (空格在 slice 周围)
  "E501",    # 行长度由 Black 处理
  "PLR0913", # 过多函数参数，有时候是必要的
]
# 未解决的导入处理
unfixable = [
  "F401", # 未使用的导入，手动移除更安全
]

# 每个文件允许的最大行数和复杂度
[lint.per-file-ignores]
"__init__.py" = ["F401", "E402"] # 允许在 **init**.py 中有未使用的导入
"test_*.py" = ["PLR2004"]        # 测试中允许魔术常量

# mccabe 复杂度设置
[lint.mccabe]
max-complexity = 10 # 函数复杂度阈值

# 格式化设置
[format]
quote-style = "double"           # 使用单引号
indent-style = "space"           # 使用空格缩进
line-ending = "auto"             # 自动检测行尾
docstring-code-format = true     # 格式化文档字符串中的代码
skip-magic-trailing-comma = true

# flake8-quotes 设置
[lint.flake8-quotes]
docstring-quotes = "double" # 文档字符串使用双引号
inline-quotes = "single"    # 代码中使用单引号

# isort 设置
[lint.isort]
known-first-party = ["mypackage"] # 替换为你的包名
known-third-party = ["numpy", "pandas"] # 常用的第三方库
section-order = [
  "future",
  "standard-library",
  "third-party",
  "first-party",
  "local-folder",
]
combine-as-imports = true
split-on-trailing-comma = false

# pydocstyle 设置
[lint.pydocstyle]
convention = "google" # 使用 Google 文档字符串风格

# Pylint 相关设置
[lint.pylint]
max-args = 8        # 函数最大参数数量
max-returns = 4     # 函数最大返回值数量
max-statements = 50 # 函数最大语句数

# flake8-bugbear 设置
[lint.flake8-bugbear]
extend-immutable-calls = ["fastapi.Depends", "fastapi.Query", "fastapi.Path"]

# 命名约定
[lint.pep8-naming]
classmethod-decorators = ["classmethod", "pydantic.validator"]

